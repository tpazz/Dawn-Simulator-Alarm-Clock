COM3505 2019 Marking Scheme
===

COM3505 is a 10 credit level 3 course. Marks are allocated for **practical
work** (60%, based in the DIA 2.02 Electronics Lab) and for a **MOLE exam**
(40%).

Practical work is mostly done in pairs, with each pair checking into a joint
code repository (on GitLab). This work comprises some hardware elements (basic
circuit prototyping, measurement and soldering), some firmware elements
(developing code that runs a networked microcontroller and associated sensors
and actuators), and some software elements that run in the cloud (to process
data posted by firmware). Each lab pair should push their firmware code
regularly, and at minimum before the assessment deadlines.

Each week's lecture finishes with a TODO list for the subsequent week, and
each week a set of notes are published to your GitLab repository.
In weeks 6 and 12 each pair demonstrates their work to the teaching staff
during two formal lab assessment sessions. The first of these covers exercises
based on the first half of term, and the second covers project work.

(Note: during weeks 1 to 5 and 7 to 11 we **do not** mark your work, but we do
record data about how the labs are going, how people find the exercises, what
the levels of learning are like and so on. This is needed for two reasons: 1.
as background knowledge that we will use in weeks 6 and 12 to help structure
our formal assessments; 2. to help us give you feedback and help us adjust the
course to better fit student capabilities.)

In week 12 individuals are given a **MOLE quiz** covering the material in the
lectures. (This is not assessed as a pair but as individuals.) There is a
mock quiz in week 7.

Code is assessed according to both functionality (does the device do what is
intended? is the operation robust in face of different conditions? etc.) and
quality (is it structured to enhance readability and maintainability? is there
appropriate commenting? does it conform to a style and stick to it? are
interfaces minimised and simplicity maximised? etc.). In addition
documentation (when requested) is assessed, and students' abilities to
demonstrate their work within a short time period during the two formal
assessments. Documentation which is concise, clear, well written and
illustrated appropriately will score more marks, as will reference to
appropriate supporting materials (e.g. from the course reading lists). Linking
of on-line API reference materials and/or library sources is also good idea.

Code that "seems to work" is the first step in a (non-TDD!) project; code that
has been tested to destruction, fixed and tested again, and again, and again,
stands a chance of being _reliable_. Documenting what type of testing is
appropriate to a particular task will attract extra marks, as will the
implementation of tests and/or data collection routines that make the
performance characteristics of code more explicit.

Your understanding of the principles behind the material is further assessed
during the exam in week 12.

The assessment schedule is:

- weekly **monitoring** of code quality (via GitLab and in the lab, with
  marking checkpoints at weeks 6 and 12)
- **lab assessment 1**, week 6
- **lab assessment 2**, week 12
- **MOLE quiz**, week 12 (mock at week 7)

Feedback on work quality will be available every week during the lab sessions,
from the lecturing and teaching assistant staff. **MOLE** results will be made
available soon after the exam.

**Note**: teamworking is an important skill in software engineering (for
example in pair programming). Success depends on both social and technical
skills. We expect the members of each lab pair to contribute equally to the
work; if this proves difficult for particular reasons (e.g. illness or
absence) the pair should contact lecturing staff in timely fashion for
discussion. If both members of a pair agree at the end of the course that the
balance has been unequal, they should jointly write to the lecturer stating
what distribution of effort they believe to be fair (e.g. 60-40 or 70-30 or
etc.).

**Also note** that model solutions to the weekly assignments are published at
the end of each week. It is fine to build on these solutions in subsequent
weeks. Therefore it is not a requirement that you are successful in all of
each week's assignments: if something proves too difficult make your best
attempt, then can catch up based on the model solution in subsequent weeks.
(Student code repository snapshots are taken, and the model solutions are
published, one hour or less before the lecture, so one hour before the lecture
is the regular deadline for submission of work via `git push` to your
repository.)


# Lab Assessment 2, Projects (Week 12)

We will allocate marks for projects as similarly to LA1 (Week 6). The main
difference with projects is that different elements can have different
difficulties. Where particular tasks are more difficult than normal, their
successful completion will attract extra marks. Elements of the assessment
include: documentation (design, implementation and testing); code
(functionality, security, style and comments); operation did it work in the
lab? did the firmware compile and load in our automated test suite?

As with the previous practical assessment, marks will be awarded for both core
functionality (e.g. getting the RoboCar to move around, or getting the TV
Remote to flash the LEDs with valid control patterns, or getting the MP3
player to play music) and for additional elements that you may decide are
appropriate. Data collection and analysis will also attract marks (how much
battery life does your project expect? how fast does LoRaWAN communication via
the Things Network happen? how secure is your solution?).

Good luck!
