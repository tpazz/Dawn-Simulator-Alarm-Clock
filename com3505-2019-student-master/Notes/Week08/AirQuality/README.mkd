Air quality monitor notes
===

We'll be using two low-cost sensors to give an indication of air quality, a
dust sensor (Sharp GYP2Y1010AU0F) and a Volatile Organic Compounds sensor
(MQ-135). In addition we're using a digital temperature and humidity sensor,
the AM2302, a clone of the popular DHT22.

Both air quality sensors are analog sensors that are powered by 5V. They return a voltage
that is between 0V-5V; the level of the voltage is proportional to the level
of dust or VOC's sensed.

Because our ADC (Analog to Digital Converter) in the ESP32 only has a limited
input voltage range (0-1.5V with other ranges available) we need to scale the
sensor output voltage with a potential divider.

A potential divider is made of two resistors that divide the voltage according
to the formula:

```
    Vout = Vin ( R2 / R1+R2 )
```

We need to divide the Vout by 5 to scale it correctly, giving Vout approx 1.3
and Vin=5; working out the equation to fit into the available resistor values is
a nice excercise for the reader.

If the reader does not feel like exercising then online calculators such as
http://www.ti.com/download/kbase/volt/volt_div3.htm will select resistors that
minimise the error.

For further reading about the voltage divider see
https://learn.sparkfun.com/tutorials/voltage-dividers.

The output voltages from these dividers go to the ESP32 -- it has multiple ADC
channels -- we are using A2 and A3.

In our circuit, resistors R4 & R5 form a potential divider for the VOC sensor,
reducing it's range from the 0-5V the sensor outputs to 0-1.25V. The ADC has a
switchable attenuator and so we can set it for 1.5V range with
`analogSetPinAttenuation(A0, ADC_2_5db)`. We're using this range as it is more
linear than the 11db range, but still gives a convenient voltage divider, and
we avoid going to the end of the range where the conversion looses accuracy.

For the dust sensor, we can also use the same voltage divider to reduce the 5V
output down to a measurable 1.25V, resistors R2 & R3 form this potential
divider.

The AM2302 sensor uses a proprietary digital protocol but luckily a library
hides that from us. We add a 10K resistor R6 to act as a pull-up on the
data signals from this sensor to the microcontroller.

The other components in our circuit, R1 and C1, are needed to make the dust
sensor operate correctly. For more information on the dust sensor, read the
application note https://global.sharp/products/device/lineup/data/pdf/datasheet/gp2y1010au_appl_e.pdf. Note - the capacitor C1 is an electrolytic type that has
polarity - make sure you wire it in the correct way round!

![a schematic](Air-Quality-Schematic.png)

For construction, I recommend using breadboard at first, and then once the
circuit is working you can convert it to soldered connections. Stick the
breadboard and dust sensors down to the assembled expander board using sticky
pads:

![Expander with bb dust](Expander_with_bb_dust.jpg)

The idea is to place the dust sensor so that the hole in the centre of the
sensor is below the board, so that air (and dust) can be measured:

![Dust sensor](Dust_sensor.jpg)

Using the schematic as a guide, connect your component together on the
breadboard. You may find the wires from the dust sensor difficult to insert
into the breadboard -- try twisting the strands of wire together. You may need
to use a soldering iron to melt some solder onto the twisted wire -- this is
called 'tinning' the wire:

![Tinned wires](Tinned_Wires.jpeg  "Good and bad tinned wired") from:
http://thesolderblog.blogspot.co.uk/

Then I suggest starting by connecting the power wires - there are three
voltages in this circuit, two potential dividers and three signals going into
the ESP32! With all those connections it really helps to use colour codes to
help keep them all in the right places. I've used:

- Black for Ground
- Red for 3.3V
- Orange for 5V
- Green for the MQ-135 signal
- Blue for the AM2302 signal
- Brown for the dust sensor signal


After all the sensors, wires and passive components have been placed on the
breadboard it might look something like this:

![Breadboard with sensors](Breadboard_with_sensors.jpg)

Seriously - once you have got the circuit working - you are strongly advised to
solder the wires neatly in place otherwise you will be spending a lot of time
debugging loose wires!
