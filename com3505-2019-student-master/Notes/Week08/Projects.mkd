unPhone Projects: Design, Build, Demo
===

[ **NOTE**: parts of this may be out-of-date; it was due next week but is
being pushed out in a hurry because of the strike :( ]

Now you need to chose a project and then to start:

- documenting your design
- building any extra hardware that is needed
- working on the firmware
- thinking about how you will demo the project in week 12

If you need extra lab time for the hardware build note that soldering and etc.
facilities are available in the iForge, and that the DIA 2.02 lab is often
available on Wednesday afternoons (after 3pm if not before). LoRaWAN should be
available in most of the Diamond, and a somewhat random selection of other
parts of campus (and in the corridor outside Hamish's office, but camping
there may result in getting some strange looks :) Seriously, the transceiver
in G28A is visible from some distance; give it a try and see!).

**For the hardware**, you need to collect it this week.

**For the firmware**, your repository now contains:

- `MyProjectThing`, a template for your firmware, that contains examples of
  all the unPhone modules in operation, and a `MyProjectThing.mkd` file for
  your documentation; note that out of the box the sketch is configured to
  kick the tyres on all the modules, and allow stepping through tests via the
  touch screen; change `TestScreen::activate(true);` to `false` to change this
  behaviour.
- a `ProjectExamples` directory, with several sketches that show how libraries
  work for those projects using external hardware (`BigDemo`, for example,
  includes the predictive text library; press the white arrow on screen to
  move between functions)

The modified libraries for on-board modules that use the IOExpander, and
libraries supporting the additional hardware we've given out, live in
`unphone/lib` and `unphone/sdks/Arduino/libraries`.

As before you should keep checking in and pushing to your repository as you
iterate through design, development, testing and documentation phases.


---
# Possible Projects

There are many possible projects, some using additional hardware, some just
using the unPhone on its own. Here are some suggestions.

Projects using just the unPhone:

- TV-b-gone, TV remote control (though you may want to use an external sensor
  to test operation of the unPhone's IR LEDs)
- text messaging without Telcos: basic communications over LoRaWAN
- an unPhone UI framework (find and adapt or reuse)
- enhance the predictive text UI
- a ShakeMe UI: using the accelerometer for gesture-based control
- power usage analysis and off-grid modelling

Projects using additional hardware:

- robocar
- thermal imaging with the [thermal camera
  featherwing](https://www.adafruit.com/product/3622)
- air quality monitoring
- intrusion detection or etc. using a PIR sensor
- location-based systems (e.g. Panic Button) using a GPS featherwing
- WaterElf version 7
- music player, and/or musical instrument
- spoken note-taker with cloud ASR
- dawn simulator alarm clock
- lecturer quality feedback traffic lights
- A.N. Other (just ask first!)

The next section details hardware build issues and relevant libraries and etc.
for various project options.


---
# Build and Development Notes

## Expander Board

The projects that use additional hardware need to [assemble the expander
board](Expander/README.mkd):

![Expander board for unPhone](Expander/Expander_with_headers_and_ffc.jpg) 


## TV remote / TV-B-Gone

Using the IR LEDs built in to the unPhone, start by reviewing the TV-B-Gone
[codes and code
inspiration](https://learn.adafruit.com/tv-b-gone-kit?view=all). Checkout the
[build notes](IRRemote/README.mkd) for how to get started. You can now collect
an infra-red reciever: ![IR reciever](IRRemote/TSOP4838.JPG) that demodulates
the IR transmissions and produces digital signals straight into the ESP32.

(We'll also use these to demo the operation of your project in the lab
assessment.)


## Air quality monitor

This project uses three sensors to measure various aspects of [Air
Quality](AirQuality/README.mkd):

![Air Quality assembled](AirQuality/Breadboard_with_sensors.jpg)

This project is relatively complex to wire up, so we've combined the unPhone
expander with a breadboard to make it easier. You're welcome to solder the
components directly to the expander instead if you prefer.


## Campus panic button

This project uses the unPhone and determines the location of your board using
[Google's geolocation API](PanicButton/README.mkd), or try the new [GPS
featherwing](https://learn.adafruit.com/adafruit-ultimate-gps-featherwing).


## RoboCar

We are all eagerly anticipating our robot overlords! Get ahead of your fellow
humans by [building a simple robot](RoboCar/README.mkd):

![robocar front](RoboCar/robocar_front.jpg)


## Peer-to-Peer voting systems

The [challenge with this project](P2PVoting/README.mkd) is to provide
mechanisms to prevent vote stuffing, interception and ensure privacy of votes.


## Home automation

Control the world!! Or at least, things that plug into a mains socket... This
project adds remote [mains power switching](MainsPowerSwitchingNotes/) to your
unPhone using a 433 MHz transmitter:

![Expander and 433MHz
Transmitter](MainsPowerSwitchingNotes/Expander_and_433.jpg)


## Dawn simulator alarm

"Show me someone who is bored of LED's and I will show you someone who is
bored of life". This project uses beautiful and useful NeoPixel LEDs to
[simulate dawn](NeoPixel/README.mkd):

![Neopixel on expander](NeoPixel/Neopixel_on_expander.jpg)


## MP3 player

The unPhone can be attached to a feather with a [VS1053 MP3 decoder
chip](http://www.vlsi.fi/en/products/vs1053.html) which can also do a nice job
of [synthesising MIDI
input](http://www.vlsi.fi/fileadmin/software/VS10XX/vs1053mid.mp3). Store your
`.mp3` files on the SD card that came with your unPhone (after formatting it
to FAT), and see the example code for how to play via the headphone jack.

Note that streaming audio is a blocking operation for at least one of the
ESP32's cores, so your UI will have to find clever ways to squeeze into
available processing power!


## Predictive text UI

See the `Predictor` examples in the `BigDemo` sketch, which is derived from
the `predictor/` library (which was originally written by Mark Hepple --
thanks Mark!). Currently the UI is very basic -- can you improve it? How many
words can you support on the ESP without running out of memory?


## Musical instrument

Using the [VS1053](http://www.vlsi.fi/en/products/vs1053.html)'s [MIDI
synthesis](http://www.vlsi.fi/fileadmin/software/VS10XX/vs1053mid.mp3)
capability and e.g. the accelerometer as a control mechanisms many musical
instruments become possible. Pick up a [music player
featherwing](https://www.adafruit.com/product/3357) if you want to build one
of these.


## Bedtime tracker

Eyes drooping? C programming not seeming quite as exciting as usual? Perhaps
you should be getting more sleep :)  How to track your screen-off shut-eye
time and present the data back in an easy to interpret form?


## Battleships game

This is a [popular game](https://en.wikipedia.org/wiki/Battleship_(game)) with
simple UI requirements, perfect for a connected microcontroller like the
ESP32.


## A note on UIs

These libaries might be worth looking at if you want to do sophisticated
UI stuff:

- [LittleVGL](https://littlevgl.com), which is now supported by Espressif, and
  looks like the best bet for ESP32 at present
- [Micro GFX](https://ugfx.io), also supported by Espressif, also looks good
  but the source code doesn't seem to be on a public version control system
- [Embedded Wizard](https://www.embedded-wizard.de/platforms/espressif-esp32)
  which supports ESP32 (though not the Adafruit board specifically), but isn't
  open source


---
# Kit lists

The additional equipment needed for (some of the) projects is:


## All projects with external components

- unPhone expander board
- sticky tape for attaching to back of case


## Featherwing Projects

Several projects just need a single additional featherwing, e.g. the GPS,
thermal imaging, mp3 player or NeoPixel array projects. These boards then plug
into a socket on the expander board and away you go. (If you wish you may also
3D print casing for the expander etc. to go on the back of the unPhone; see
[the doc/case
directory](https://gitlab.com/hamishcunningham/unphone/tree/master/doc/case)
for models.)


## Dawn simulator

- [NeoPixel array
  featherwing](https://learn.adafruit.com/adafruit-neopixel-featherwing)


## Home automation

**Note:** we only have a few of these in stock :(

- 433 MHz transmitter board
- mains socket switch
- 30cm length of wire for ariel


## Air Quality

- Sharp dust sensor
- MQ-135 gas sensor
- AM2302 Humidity sensor
- 3x10k resistors
- 2x3.3k resistors
- 1x180R resistor
- 1x220uF capacitor
- Dust sensor cable
- Breadboard
- Jumper cables
- 2x pin headers
- Sticky tape


## Sound Input

- [Microphone breakout
  board](https://learn.adafruit.com/adafruit-i2s-mems-microphone-breakout)


## Robot Car

- Robot chassis and motor kit
- Motor driver feather
- Battery box
- 4xAA batteries
- 4xlong pin headers
- 4 Sticky pads


# Assessment Notes

Additional information about the marking scheme and assessment appears in
[marking-scheme](LA2MarkingScheme.mkd).
