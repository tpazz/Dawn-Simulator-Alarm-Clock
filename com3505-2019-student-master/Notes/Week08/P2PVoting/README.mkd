Peer-to-Peer Voting
===

The **first thing to do** is to
use the code for Ex09 so that you have a way
to configure your ESP on new networks:

```C++
void setup09() { // joinme wifi UI, with captve portal
  ...
}

void loop09() {
  dnsServer.processNextRequest(); // handle DNS  requests
  webServer.handleClient();       // handle HTTP requests
  ...
}
```

**Secondly**, find the location of your board using Google's geolocation API.
In order to make the things we're voting on localised, we need a way to find
our location and report this.

This could be provided by a GPS chip, however these consume a moderate amount
of power and take a fair amount of time to initialise and get a 'first fix'.
In addition they don't work well in urban canyons (between buildings) or
indoors.

We will be using a cunning technique that relies on the relative strength of
wireless signals. By comparing the signal strength seen by a device with a
map of access points the location of the device can be inferred through
triangulation.

Google has already done the tedious task of collecting the location of
millions of wireless access points and makes an API available (to developers)
that takes a list of wireless signals in the location, and returns a latitude
and longitude co-ordinate.

Github user @gmag11 has contributed code for the ESP32 that uses the google
API to return location data - [Google location
code](https://github.com/gmag11/ESPWifiLocation)

You will need to get a google API key from [Google Geolocation
API](https://developers.google.com/maps/documentation/geolocation/get-api-key)


# Getting a list of available votes

You could use a Twitter account to store and access votes, using Twitter's
location function, or implement an IFTTT notification mechanism.
