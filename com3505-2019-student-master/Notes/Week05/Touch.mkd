The ESP's Sense of Touch
===

The ESP32 provides touch sensing capabilities via 10 of its GPIO pins. Each of
these pins can measure capacitative variance incident on electrodes embedded
in touch pads. (Or, if we're doing things in a hurry, a bit of handy wire
connected to the relevant pin!) 

The ESP's Arduino core defines shortcuts for the GPIO pins that are
touch-capable (and accessible on your boards) as follows (in file
`unphone/sdks/arduino-esp32/variants/feather_esp32/pins_arduino.h`):

```cpp
static const uint8_t T0 = 4;
static const uint8_t T1 = 0;
static const uint8_t T2 = 2;
static const uint8_t T3 = 15;
static const uint8_t T4 = 13;
static const uint8_t T5 = 12;
static const uint8_t T6 = 14;
static const uint8_t T7 = 27;
static const uint8_t T8 = 33;
static const uint8_t T9 = 32;
```

As usual, these capabilities can be accessed in firmware via both an Arduino
API (which is fairly basic) or an ESP IDF API (which is more powerful but more
complex).

In Arduino-land, the following will read a value from GPIO 14 and store the
current value in `tval`:

```cpp
int tval = touchRead(T6);
```

(What is GPIO 14 and how do I find it?! See the discussion on pinouts in [the
week three 9 LEDS notes](../Week03/9leds.mkd).)

The values returned from `touchRead` (or the IDF equivalent `touch_pad_read`)
are not binary (unlike `digitalRead`, for example), but represent an analog
measure of capacitance. To control an OTA process, we probably only need a
binary output ("is the user touching the magic pad or not?"), so your code
will need a method for translating the analog signal to a binary yes/no
decision. There is also noise in the signal, so you may need to discard
outlying values or perform averaging of values.

Below some example output from the Arduino IDE serial plotter, with a jumper
cable attached to GPIO pin 14, and `Serial.printf("%d\n", touchRead(T6));` in
`loop()`. The high values (around 75) are where there is no touch happening;
the first low range (around 60) is where I'm touching the outside of the cable
(which is covered in plastic); the second low range (around 15) is where I'm
touching the metal end of the cable. In all cases there are random spikes of
noise!

![Serial monitor touch](serial-monitor-touch.png)

(The serial monitor is accessible via the IDE's `Tools` menu.)

The IDF API for touch sensing (for the version that is currently set up via
`unphone/Makefile`, 3.2.3) [is detailed
here](https://docs.espressif.com/projects/esp-idf/en/v3.2.3/api-reference/peripherals/touch_pad.html).
Using this API in filtered mode (with a filter period of 100mS) results in a
graph like this (for similar test conditions as above):

![Serial monitor touch, IDF API](serial-monitor-touch-idf.png)

There's considerably less noise in this version (though note the relatively
slow descent to the low state for a pin touch).
