COM3505 week 07 notes
===

# The Lecture

This week's lecture [slides are
here](https://docs.google.com/presentation/d/1nKq2Wc0hYn-QwsQ2bz7Bidg9aGA2tDjUhPTkMEYfNTk/edit?usp=sharing).
(This is Lecture 6, which comes in Week 7 because of the "reading week in Week
6").


# Learning Objectives

Our objectives this week are to:

- get started on the second half of the course
- start to look beyond the device and examine options for cloud-based data
  logging, analysis, and remote triggers or control
- test our knowledge of the theoretical material of the course with a mock
  exam


# Assignments and Assessment

- Revise the lectures, reading material and notes for weeks 1 through 7 ready
  for the mock exam.
- Create firmware to trigger an IFTTT event. For example, you might use the
  ESP's touch sensing capability to Tweet whenever you tap it three times
  (handy for sending secret messages from boring lectures?).


## Coding Hints

### Setting up an IFTTT applet

IFTTT stands for "if this, then that". We can think of the "this" as an
incoming notification (or source), and the "that" as a triggered action (or
sink). IFTTT "applets" accept notifications from diverse sources and trigger
actions on diverse sinks. For example, we can set up an HTTP-based trigger
(using their "webhooks" service) that causes Twitter to tweet a message.

First create an account on [ifttt.com](https://ifttt.com) and/or download the
app for your phone. (You'll need a [Twitter](https://twitter.com) account too
if you want to tweet.) In IFTTT navigate your way to new applet creation:

- in a web browser click on `Explore`, or go to
  [ifttt.com/discover](https://ifttt.com/discover)
- in the Android app: click on `Get more`
- now click on `+` (`Make your own Applets from scratch`)

This will bring up `If +__This__ Then That`. Run through these steps:

- click on the `+__This__` and select `Webhooks`
- select `Receive a web request`
- give an `Event name` (e.g. `my-first-ifttt-trigger`) and do `Create trigger`

This brings up `If (hook logo) Then +__That__`. Now:

- click on the `+__That__`
- select an `action`, e.g. `Twitter`
- select `Post a tweet`
- edit the `Tweet text` message to be meaningful to you; you might want to
  Tweet a particular account (by starting the message with `@account`) to
  avoid polluting your Twitter account's tweet stream
- hit `Finish` to create your applet

We've now set up most of what we need on IFTTT, but we need to copy a token to
allow our ESP to authenticate against the server. To do this either

- (on phone) navigate to `My services` and then `Webhooks`, then open
  settings and click the URL that appears under `Account info` (something like
  `https://maker.ifttt.com/use/my-long-key-string`)
- (on browser) open
  [ifttt.com/maker_webhooks](https://ifttt.com/maker_webhooks), and click on
  `Documentation`

This will give you a page saying something like:

```
Your key is: my-long-key-string
Back to service
To trigger an Event
Make a POST or GET web request to:

https://maker.ifttt.com/trigger/{event}/with/key/my-long-key-string
...
You can also try it with curl from a command line.

curl -X POST https://maker.ifttt.com/trigger/{event}/with/key/my-long-key-string
```

Replace `{event}` with your event name, e.g. `my-first-ifttt-trigger` and
click `Test it`, or copy the `curl` statement and try it from the command
line.

**NOTE:** IFTTT services have quite a high latency, and this seems
particularly true for Twitter. You can expect to wait 10 minutes or more for
the tweet to appear in public! (You should be able to test the service without
waiting for that to happen though, as the POST request will return a
`Congratulations! You've fired the {event} event` message if it succeeds. Also
check the `Webhook>Settings>Activity` page to see if Twitter accepted the
trigger or if some other problem may have occured. YMMV!

**Make a note of your key**, and the URL that the service lives at. (Following
the style of previous weeks' exercises, you could put the key in your
`private.h` file, e.g.: `#define _IFTTT_KEY "j7sdkfsdfkjsdflk77sss"`.


### Accessing the IFTTT applet from firmware

Now that we have a working service, we just need to get the ESP32 to call it
over HTTP(S). [This
example](https://github.com/espressif/arduino-esp32/blob/master/libraries/HTTPClient/examples/BasicHttpsClient/BasicHttpsClient.ino)
from the ESP32 Arduino core can be adapted to talk to IFTTT with a little
work. If we define a `doPOST` method (based on the example) that takes a URL
and a JSON fragment in IFTTT format, we can do the service trigger job like
this:

```cpp
void doPOST(String url, String body) {
// ...
}

void iftttTweet(String messageDetails) {
  String url(
    "https://maker.ifttt.com/trigger/waving-at-twitter/with/key/" _IFTTT_KEY
  );
  doPOST(url, messageDetails);
}
```

(You need to define the `_IFTTT_KEY` in your `private.h` file in the normal
way.)

Good luck!


# Reading 

- Adafruit/DigiKey's "All the IoT" series has lots of useful background on IoT
  connectivity options:
  - https://cdn-learn.adafruit.com/downloads/pdf/alltheiot-transports.pdf
  - https://cdn-learn.adafruit.com/downloads/pdf/alltheiot-protocols.pdf
  - https://www.digikey.com/en/resources/iot-resource-center/videos
- This article on IoT hubs/gateways is interesting on how the market has
  changed in the last couple of years:
  https://staceyoniot.com/heres-why-smart-home-hubs-seem-to-be-dying-a-slow-painful-death/
- If you're working on your own machine and like neither the IDE nor the IDF,
  you might try the Arduino CLI:
  https://www.linuxjournal.com/content/arduino-command-line-break-free-gui-git-and-vim
