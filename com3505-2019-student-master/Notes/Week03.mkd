COM3505 week 03 notes
===

# The Lecture

The week 3 [lecture slides are
here](https://docs.google.com/presentation/d/18YRtyIAcVPuSzdmwnECkd6IwACh23vjA_R6-yyTS9zs/edit?usp=sharing).


# Learning Objectives

_Internet? What internet?!_ Up to now we've been programming the ESP as a
standalone device. In the next period we'll create and connect to networks,
and figure out how to configure connections for devices without UIs.

Our objectives this week are to:

- understand more about the ESP32 and the Arduino IDE
- deepen our understanding of the hardware space around the IoT (SoCs and
  MCUs, devices vs. gateways, ...)
- learn about the firmware/software languages used for the IoT

Practical work will include:

- a third outing for the breadboard, working towards a more permanent
  prototype on matrixboard
- cover some useful programming idioms, and take a peek at ESP IDF:
    - experiment with time slicing in the main loop
    - add debug code to sketches
    - [a first IDF compile](Week03/esp-idf.mkd)
- start working with the ESP's WiFi stack

(There are a lot of exercises this week; you'll benefit from completing all of
them, but if you don't have time don't worry, just make sure to look at the
model solutions each week.)


# Assignments and Assessment

**Notes**:
- as usual, pull the new stuff into your git tree:
    - `cd com3505-2019-student; git pull`
- also as usual, DON'T edit the `Thing/\*` and `Notes/\*` trees
    - note that you now have [Ex01.h](../Thing/Ex01.h) /
      [Ex01.ino](../Thing/Ex01.ino) etc. in your [Thing](../Thing) directory,
      which contains a model solution to last week's exercise(s)... please
      study this each week and compare it with your solution
    - remember that it is fine to use code from the model solutions in
      subsequent weeks' exercises

**Exercises**:
- **Ex03**:
    - add more [two more LEDs to your Ex02 board](Week03/more-blinky.mkd)
    - run as traffic lights, triggered by the switch
- **Hardware 3**: construct a [nine LED breadboard](Week03/9leds.mkd); use the
  new [NineLEDsIDF firmware](../NineLEDsIDF/) from your repo to flash the
  lights in sequence (with the ESP IDF SDK); try reversing the sequence
- **Ex04**: debugging infrastructure: experiment with macros to allow adding
  flexible debug code
- **Ex05**: arrange for tasks to be performed in different loop iterations
  (e.g. every 1000 iterations do X; every 50k iterations do Y; ...)
- **Ex06**: becoming a wifi access point and web server
   - The ESP can act as a wifi access point, and is powerful enough to run a
     simple web server. Using `WiFi.h` and `ESPWebServer.h` fire up an access
     point and serve one or more pages over the web.
   - `ESPWebServer webServer(80);` will create a web server on port 80
   - `webServer.on("/", handleRoot);` will register the procedure `handleRoot`
     to be called when a web request for `/` is received
   - `webServer.send(200, "text/html", toSend);` will serve a page from the
     `String` `toSend`
   - `WiFi.mode(WIFI_AP_STA))` and `WiFi.softAP("ssid", "password")` will
     create an access point


# Notes on the model code from Week 2

## Recap: connecting to the ESP32

The ESP32 board we are using has a micro-usb socket to provide power and also
allow communications between the microcontroller and your computer. Start by
connecting the two together using the supplied cable. Start the Arduino IDE
(e.g. by `make arduino-ide` on `lincomp`). Ensure that the `Tools>Board`
selected is the "Adafruit ESP32 Feather". If you're running the IDE locally
(e.g. on your own machine or on the LTSP desktops) look in the `Tools>Port`
menu to check that the serial connection has been established.


## Various Arduino functions

Note: in the Arduino IDE certain words such as OUTPUT, HIGH, TRUE etc. are
pre-defined and shown in blue. Similarly functions such as pinMode,
Serial.begin are coloured in orange -- this can help you catch syntax errors.

```Arduino
5  Serial.begin(115200);           // initialise the serial line
```

Serial communication (sending or recieving text characters one by one) has to
be initiated with a call to the <span style="color:#D35400">begin</span>
function before it can be used. The serial communications between the ESP32
and computer can operate at various speeds or baud rates -- we use 115200
baud. If you aren't getting any response, or gibberish characters on the
serial port monitor, then check you've got the correct speed set.

```Arduino
7 pinMode(BUILTIN_LED, OUTPUT);   // set up GPIO pin for built-in LED
```

pinMode is an Arduino command that tells the microcontroller to set up a
single pin (first parameter) using a certain mode (second parameter). The two
basic modes are `INPUT` and `OUTPUT`; `INPUT_PULLUP` connects an internal
resistor between the pin and 3.3V (good for listening for pull down events).

```Arduino
13   delay(1000);                  // ...and pause
```

The delay function in Arduino takes milliseconds as it's parameter -- so a
<span style="color:#D35400">delay</span>(1000); command pauses for 1 second.

```Arduino
20 uint64_t mac = ESP.getEfuseMac(); // ...to string (high 2, low 4):
```

The ESP32 Arduino layer includes some helpful functions like this one to allow
us to get (read) the status of the electronic fuses. After the silicon for the
ESP32 is manufactured using a common mask, each one is programmed to give it a
unique identity -- including things like MAC addresses. These are one-time
electronic 'fuses' that burn the MAC address into the chip so that it cannot
be reprogrammed.


## Reading from Switches

```Arduino
12  pinMode(14, INPUT_PULLUP); // pin 14: digital input, built-in pullup resistor
```

This <span style="color:#D35400">pinMode</span> call enables built-in pullup
resistors connected between the pin and the positive supply voltage (3.3V).
These prevent the input 'floating' when it isn't connected to anything and
instead make the input go high.

```Arduino
  if(digitalRead(14) == LOW) { // switch pressed
```

The <span style="color:#D35400">digitalRead</span> function  returns the
binary state of the input pin given as a parameter. Because we are using a
pullup resistor and connecting the switch to 0V -- the logic that <span
style="color:#D35400">digitalRead</span> returns is reversed. Therefore, when
the switch is pressed, the function returns <span
style="color:#00979C">LOW</span>.


# Reading

- _Opportunities and Challenges in the IoT_, a conversation with Cory Doctorow
  and Tim O'Reilly
  http://www.oreilly.com/iot/free/iot-opportunities-challenges.csp
- Check out **Kolban's book on ESP32** (Neil Kolban) at
  https://leanpub.com/kolban-ESP32 -- it is a work in progress but free and
  with loads of good stuff. (His snippets library on github is worth a look
  too!)
- Have a general look around at the ESP32 Forum: https://esp32.com/

<!--
rather old:
Also the “Arduino IDE Guide”: https://www.arduino.cc/en/Guide/Environment
-->
