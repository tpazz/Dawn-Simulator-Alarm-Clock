A final breadboard prototype: 9 LEDs
===

Prototyping IoT devices has become much easier and cheaper in recent years.
This makes development cycles much faster: from idea to prototype to product
is now a cycle measured in weeks and months instead of years. We'll finish our
quick tour of prototyping skills (that began in Lab 1 with soldering,
breadboarding and using the multimeter and signal generator etc.) by building
a more (physically) complicated circuit. This week we'll build it on a
breadboard, then next week solder it onto matrixboard (which is a typical
cycle in early prototyping; the next step would be to design a PCB and start
manufacturing test boards).

In the second half of term you'll have the opportunity to build projects that
use the unphone's expander board, e.g. to add GPS, or mp3 playing, or motor
drivers, or pollution sensors, or ultrasonics, or etc. These also require
soldering, and when they don't work first time the multimeter and oscilloscope
are our first ports of call to discover why.

(Hate soldering? Don't worry, there are also projects that only use the
unphone itself.)

We'll also take the opportunity this week to start using the ESP's own native
SDK, [the ESP IDF framework](esp-idf.mkd). (Your repo now has example IDF code
called [NineLEDsIDF](../../NineLEDsIDF/).)

The circuit is electrically very simple, being [Week02's Blinky](../Week02/)
with lots more LEDs, each protected by its own resistor:

[ ![9 LEDs breadboard 20](9leds-bb-20-500.jpg "9 LEDs breadboard 20") ](9leds-bb-20.jpg)

(click for larger image)

The cathode (short leg) of each LED is connected in series with an 180Î©
resistor that connects in turn to ground. The anode is connected to one of the
GPIO (general purpose input-output) pins of the ESP32. Because we're using
lots of pins, it becomes a bit tricky to fit all the connections in, and we
need to check the various references to see where is good to connect, e.g.:

![Pinouts on the ESP32 Huzzah](huzzah32esp32pinouts.png "Pinouts on the ESP32 Huzzah")

An additional complexity is that (in common with other modules) the ESP has
several names for many of its pins, e.g.:

![ESP32 pinout schematic](huzzah-32-pinout-zerynth.jpg "ESP32 pinout
schematic")

There's a good description of [pinout detail
here](https://learn.adafruit.com/adafruit-huzzah32-esp32-feather/pinouts); and
a good general discussion on which [ESP32 pins to use
here](https://randomnerdtutorials.com/esp32-pinout-reference-gpios).


in this case we'll use these pins:

```cpp
// LEDs
uint8_t ledPins[] = {
  GPIO_NUM_26,
  GPIO_NUM_25,
  GPIO_NUM_21,
  GPIO_NUM_4,
  GPIO_NUM_27,
  GPIO_NUM_33,
  GPIO_NUM_15,
  GPIO_NUM_32,
  GPIO_NUM_14,
};
uint8_t numLedPins = sizeof(ledPins) / sizeof(uint8_t);
```

Some more pics:

![9 LEDs breadboard 01](9leds-bb-01-500.jpg "9 LEDs breadboard  1")

![9 LEDs breadboard 02](9leds-bb-02-500.jpg "9 LEDs breadboard  2")

![9 LEDs breadboard 03](9leds-bb-03-500.jpg "9 LEDs breadboard  3")

![9 LEDs breadboard 04](9leds-bb-04-500.jpg "9 LEDs breadboard  4")

![9 LEDs breadboard 05](9leds-bb-05-500.jpg "9 LEDs breadboard  5")

![9 LEDs breadboard 06](9leds-bb-06-500.jpg "9 LEDs breadboard  6")

![9 LEDs breadboard 07](9leds-bb-07-500.jpg "9 LEDs breadboard  7")

![9 LEDs breadboard 08](9leds-bb-08-500.jpg "9 LEDs breadboard  8")

![9 LEDs breadboard 09](9leds-bb-09-500.jpg "9 LEDs breadboard  9")

![9 LEDs breadboard 10](9leds-bb-10-500.jpg "9 LEDs breadboard 10")

![9 LEDs breadboard 11](9leds-bb-11-500.jpg "9 LEDs breadboard 11")

![9 LEDs breadboard 12](9leds-bb-12-500.jpg "9 LEDs breadboard 12")

![9 LEDs breadboard 13](9leds-bb-13-500.jpg "9 LEDs breadboard 13")

![9 LEDs breadboard 14](9leds-bb-14-500.jpg "9 LEDs breadboard 14")

![9 LEDs breadboard 15](9leds-bb-15-500.jpg "9 LEDs breadboard 15")

![9 LEDs breadboard 16](9leds-bb-16-500.jpg "9 LEDs breadboard 16")

![9 LEDs breadboard 17](9leds-bb-17-500.jpg "9 LEDs breadboard 17")

![9 LEDs breadboard 18](9leds-bb-18-500.jpg "9 LEDs breadboard 18")

![9 LEDs breadboard 19](9leds-bb-19-500.jpg "9 LEDs breadboard 19")
