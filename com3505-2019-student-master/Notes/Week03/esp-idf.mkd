Compiling and burning firmware with ESP IDF
===

As well as the Arduino compatibility layer we've been using to program in the
Arduino IDE, Espressif also develop a native development kit called [ESP
IDF](https://docs.espressif.com/projects/esp-idf/en/latest/). The IDF SDK uses
a Makefile-based build system which means that compiling and burning can be
faster and fuller-featured than the equivalent Arduino IDE versions.

To try an example IDF build, first log into `lincomp` (the LTSP machines are
glitchy for this), then do a `make` in the `NineLEDsIDF` directory:

```bash
ssh -AX lincomp
cd com3505-2019-student/NineLEDsIDF
make app
```

The first time through this will take several minutes, but subsequent builds
will only compile what has changed from last time.

(If you're working on your own machine, you can just do `make` and the SDK
will automatically flash your board after the compile, and monitor the serial
line. You can trigger a rebuild/reflash from the monitor with Cntrl+T Cntrl+F,
and various other goodies.)

On `lincomp`, if you `ls build` you will see that a `NineLEDsIDF.bin` binary
has been created. Go back to the LTSP machine and burn it to the board:

```bash
make flash monitor
```

(Ignore errors about "not a git repository.... mruby"! If you get errors about
a missing or out-of-date python module, try `cd unphone; make
esp-pip-installs`.)

The older scripts also work, but are prone to creating "flash read error"
bootloops:

```bash
~/unphone/bin/burn.sh build/NineLEDsIDF.bin; ~/unphone/bin/listen.sh
```
(Use `Cntrl+A \` to quit.)

If you've [built your breadboard](9leds.mkd) correctly you should see them
light up in sequence. To have a look at the code [see
main/main.cpp](../../NineLEDsIDF/main/main.cpp).


# Troubleshooting

- one of the things your `lincomp` setup script (`unphone-sheffield.sh`) did
  when you ran it was set `IDF_PATH` to the location of the SDK, and add the
  compiler to your `PATH`; if you're on a different machine you may need to do
  that yourself, e.g. `export IDF_PATH=~/unphone/sdks/esp-idf`; `export
  PATH=$PATH:$HOME/unphone/sdks/arduino-esp32/tools/xtensa-esp32-elf/bin`
- we've seen a [bootloop](#esp32-bootloops/) happening on the NineLEDs
  example; if you hit one, try erasing flash and re-burning:
  `~/unphone/bin/erase.sh; ...`
- if you're installing on your own system and can't use the `unphone` setup
  routines (perhaps because you're on Windoze) make sure to use the same
  versions as we are; they're specified in `unphone/Makefile` (at time of
  writing we're on IDF 3.2.3 ESP arduino core 06a399b; 3.3 would likely work,
  but 4.x likely **not**)


## ESP32 Bootloops

A _bootloop_ is where the MCU fails to successfully initialise, triggering a
crash and immediate reboot. If you're monitoring serial, you'll see a lot of
error messages scrolling by at high speed. To figure out what is wrong we
might a) capture and decode the exceptions, b) erase the flash and try again,
or c) return to a known good firmware and try adding in features.

Some notes on diagnosing the NineLEDs issue:

I managed to partially replicate the problem on your ESP32:
think I might see a solution. Notes:

- the `listen.sh` script uses a program called `screen` to talk to the serial
  line; to quit screen use `Cntrl+A \` then `y`
- (the `\` is just on its own, not with Cntrl, which I think I got wrong in
  the lab)
- to capture output when it is scrolling fast (as in the bootloop case) try
  `Cntrl+A` then `ESC`, at which point you can page up and down (and, joy of
  joy, use Vi-style motion commands); sometimes this doesn't work due to
  timing issues, so try different speeds of typing the two commands; when you
  get it right it says `Copy mode....`; to return to normal try `q`
- the exception decode is as below (if you look at the crash when in IDF
  monitor it decodes it for you)
- these issues seem relevant: https://github.com/espressif/esp-idf/issues/3865
  https://github.com/espressif/esp-idf/issues/3932
- in testing, I could replicate the crash on your board for a while, but after
  reflashing several times (inc. from IDF, not burn.sh), I couldn't trigger it
  again
- I think that an `erase_flash` argument to esptool.py might fix the problem;
  this script has been added as `unphone/bin/erase.sh`:

```bash
#!/bin/bash
# unPhone firmware erase script

SHELL=/bin/bash
ECHO='echo -e "\033[0;32m"'
ECHON='echo -e "\033[0m"'
unset CDPATH # don't echo directories when cd'ing

ESPPORT=$([ ! -z "$ESPPORT" ] && echo $ESPPORT || \
  for p in ttyUSB0 ttyUSB1 cu.SLAB_USBtoUART; do \
  [ -r /dev/${p} ] && echo /dev/${p} && break; done)

SDKS_DIR=sdks
OPT_SDKS=/opt/unphone/sdks
ARD_LIB_DIR=$SDKS_DIR/Arduino/libraries
ARD_HW_DIR=$SDKS_DIR/Arduino/hardware/espressif

[ -d $OPT_SDKS ] || OPT_SDKS=/resources/hc/unphone/sdks
[ -d $OPT_SDKS ] || OPT_SDKS=~/unphone/sdks

# erase
python3 \
        $OPT_SDKS/esp-idf/components/esptool_py/esptool/esptool.py \
        --chip esp32 --port $ESPPORT erase_flash
```

Other things to try:
- change `python3` to `python` in the burn script
- change `921600` to `115200`
- removing the control options to `esptool`
- running round in circles shouting and screaming*

*I may have made that last bit up.

Exception decode:
```
Backtrace: 0x40085100:0x3ffb5840 0x400e6167:0x3ffb58b0 0x400e4e14:0x3ffb58d0 0x400e3fbd:0x3ffb58f0 0x400e3f43:0x3ffb5910 0x400d0c56:0x3ffb5940
0x40085100: psram_gpio_config at /home/hamish/unphone/sdks/esp-idf/components/esp32/spiram_psram.c:552
 (inlined by) psram_enable at /home/hamish/unphone/sdks/esp-idf/components/esp32/spiram_psram.c:720
0x400e6167: esp_spiram_init at /home/hamish/unphone/sdks/esp-idf/components/esp32/spiram.c:148
0x400e4e14: psramInit at /home/hamish/unphone/sdks/arduino-esp32/cores/esp32/esp32-hal-psram.c:28
0x400e3fbd: initArduino at /home/hamish/unphone/sdks/arduino-esp32/cores/esp32/esp32-hal-misc.c:200
0x400e3f43: app_main at /home/hamish/unphone/sdks/arduino-esp32/cores/esp32/main.cpp:26
0x400d0c56: main_task at /home/hamish/unphone/sdks/esp-idf/components/esp32/cpu_start.c:506
Rebooting...
```
