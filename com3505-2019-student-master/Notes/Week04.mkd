COM3505 week 04 notes
===

# The Lecture

The week 4 [lecture slides are
here](https://docs.google.com/presentation/d/18DSbqZ7YbpS7fQgn5TLY2PWtXq1qxst45J4SogD2gKo/edit?usp=sharing).


# Learning Objectives

Our objectives this week are to:

- continue practical work with the ESP's wifi stack, and develop provisioning
  capabilities in firmware
- finish off our hardware prototyping work (which we'll restart for projects
  around week 7)
- (serendipitously) play around with a
  [bootloop](Week03/esp-idf.mkd#esp32-bootloops) (triggered by burning the
  NineLEDsIDF firmware) and (hopefully) fix it


# Assignments and Assessment

To turn _things_ into _internet things_ we need to connect them to a network.
One way to connect a device without a user interface to a wifi network is to
make it a wifi access point and serve a website that displays what network
access points are available. We can then allow the user to choose an access
point and enter the key.

- **Ex07**: simple utilities for creating web pages
   - C (and to a degree) C++ is a low-level language, and generating HTML
     simply and efficiently can be challenging. To maintain a different long
     string for each page you want to serve on the device is unwieldy and
     error-prone. Create some utilities for representing and manipulating HTML
     elements and serving pages. (You might take inspiration from templating
     libraries, for example.)
- **Ex08**: become a web client and send your email & the MAC address of your
  ESP to our server (see lecture 1 slide 23 for the URL, or below)
    - you'll need to use the WifiClient (or WiFiClientSecure for HTTPS) class
      from the WiFi library, see `File>Examples>WiFiClientSecure` in the IDE
- **Ex09**: adapt Ex07/08 to allow connection of the device to arbitrary
  networks
    - in Ex07 you learned how to create a wifi access point and serve HTML
      pages to devices connected to that access point
    - using the `WiFi.scanNetworks()` method, serve HTML pages that list the
      available access points that the ESP can see, and allow a user to choose
      one, enter its key, and have the ESP connect to that network
    - `WiFi.printDiag(Serial);` is useful for printing wifi status
    - the default IP address of the ESP when running in access point mode is
      192.168.4.1 -- so if you join the ESP's network from a phone or laptop,
      go to http://192.168.4.1/ to see pages served from the device
- **hardware 4**: move last week's [nine LED breadboard
  prototype](Week03/9leds.mkd) onto [matrixboard](Week04/9leds-matrix.mkd) and
  experiment some more with the [NineLEDsIDF firmware](../NineLEDsIDF/)

In addition (and as usual) have a look at the model code from last week
(**Ex03** through **Ex06**).


## Coding hints

We can use the solutions from Ex06 (create an access point and web server) and
Ex07 (utilities for creating web pages) to get us started here. (See the
arrangements for running multiple setups and loops in the `Thing.ino` for an
example of chaining the various exercises together.) Then for Ex08 and Ex09 we
can use the `WiFi` and `WiFiClientSecure` classes, with calls to these
methods:

- `WiFi.begin(uosotherSsid, uosotherPassword)`
- `WiFi.status()`
- `WiFi.localIP()`
- `webServer.handleClient()`
- `myWiFiClient.connect(com3505Addr, com3505Port)`
- `myWiFiClient.print(
    String("GET ") + url + " HTTP/1.1\r\n" +
    "Host: " + com3505Addr + "\r\n" + "Connection: close\r\n\r\n"
  )`
- `myWiFiClient.available()`
- `myWiFiClient.stop()`
- `myWiFiClient.readStringUntil('\r')`

For Ex09 my code additionally uses:

- `WiFi.scanNetworks()`
- `WiFi.SSID(i)`
- `WiFi.RSSI(i)`

Ex07 is about templating: basic string manipulation to create HTML from
component parts; the model solution uses an array of strings, but there are,
as usual, many different valid solutions (inc. reusing 3rd party libraries).

Ex08 needs to use WiFiClientSecure, and talk to the server on the specified
port from your notes, and get the URL and paths correct; under those
circumstances it will return a line of text starting "Received...". Note that
you don't need the TLS certificate in your code in this instance.

Ex09 is about running a web server (and wifi access point to connect to it)
which lists all the other access the ESP is in range of, and allows you to
connect to one of your choice.


## Which WiFi network? What if it doesn't connect?

It is _possible_ to get an ESP to connect to Eduroam, but can be tricky, so:

You may find it convenient to connect your ESP to a portable hotspot created
via your phone or other device. Alternatively, on campus you can use a network
called `uos-other` (with key `shefotherkey05`). To use `uos-other` you need to
register the MAC address of the device via [a form linked
here](https://www.sheffield.ac.uk/cics/wireless/other) and give the backend a
few minutes to get its bearings: take a few deep breaths, have a cup of tea
or etc.

If your ESP doesn't connect, don't panic. Try printing some diagnostics,
phoning a friend or standing on your head and singing the Congolese national
anthem backwards in Latin a couple of times. Then try some more diagnostics.

(You probably **don't** want to use the `WifiGuest` network, as this requires
sign-in.)


## Details of our cloud server (for Ex08)

We detailed the internal cloud server for the course in [the Week 0
notes](https://gitlab.com/hamishcunningham/unphone/blob/master/doc/com3505/Week00.mkd#tell-us-your-account-user-name-on-gitlab).

The data format is `key=value`, e.g.: `email=hamish@gate.ac.uk`, and it
requires a `.ac.uk` email address. A request to store the device's MAC address
would look like this:
`https://hc-nuc5.shef.ac.uk:9194/com3505-2019?mac=ThisESPsMAC&email=MyName@sheffield.ac.uk`


# Reading

- Sparkfun tutorials on communications protocols:
    - https://learn.sparkfun.com/tutorials/serial-communication
    - https://learn.sparkfun.com/tutorials/i2c
- _The Epic Struggle for the Internet of Things_, Bruce Sterling
  https://www.courses.tegabrain.com/SS15/wp-content/uploads/2015/01/BruceSterlineIoT.pdf
- _Adafruit.io_, Justin Cooper https://learn.adafruit.com/adafruit-io?view=all
- _Discussion Paper on the Internet of Things_, Anzelmo, Bassi, Caprio,
  Dodson, van Kranenburg, Ratto https://goo.gl/WESrCh
- **[Chips with
  everything](https://www.economist.com/leaders/2019/09/12/how-the-world-will-change-as-computers-spread-into-everyday-objects),
  _The Economist_ Sept 14th 2019 special on the IoT**:

> One way to think of it is as the second phase of the internet. This will
> carry with it the business models that have come to dominate the first
> phase—all-conquering “platform” monopolies, for instance, or the data-driven
> approach that critics call “surveillance capitalism”. Ever more companies
> will become tech companies; the internet will become all-pervasive. As a
> result, a series of unresolved arguments about ownership, data,
> surveillance, competition and security will spill over from the virtual
> world into the real one.

> Start with ownership. As Mr Musk showed, the internet gives firms the
> ability to stay connected to their products even after they have been sold,
> transforming them into something closer to services than goods. That has
> already blurred traditional ideas of ownership. When Microsoft closed its
> ebook store in July, for instance, its customers lost the ability to read
> titles they had bought 

...

> Virtual business models will jar in the physical world. Tech firms are
> generally happy to move fast and break things. But you cannot release the
> beta version of a fridge. 

...

> In the virtual world, arguments about what should be tracked, and who owns
> the resulting data, can seem airy and theoretical. In the real one, they
> will feel more urgent.

...

> The need for standards, and for iot devices to talk to each other, will add
> to the leaders’ advantages—as will consumer fears, some of them justified,
> over the vulnerability of internet-connected cars, medical implants and
> other devices to hacking.

...

> The trick with the iot, as with anything, will be to maximise the benefits
> while minimising the harms.

[p. 13]

> Attracted by the lure of new business, and fearful of missing out, firms are
> piling in. Computing giants such as Microsoft, Dell, Intel and Huawei
> promise to help industries computerise by supplying the infrastructure to
> smarten up their factories, the sensors to gather data and the computing
> power to analyse what they collect. They are competing and co-operating with
> older industrial firms: Siemens, a German industrial giant, has been on an
> iot acquisition spree, buying up companies specialising in everything from
> sensors to office automation. Consumer brands are scrambling, too:
> Whirlpool, the world’s biggest maker of home appliances, already offers
> smart dishwashers that can be controlled remotely by a smartphone app that
> also scans food barcodes and conveys cooking instructions to an oven.

...

> A world of ubiquitous sensors is a world of ubiquitous surveillance.
> Consumer gadgets stream usage data back to their corporate makers. Smart
> buildings—from airports to office blocks—can already track the people who
> move through them in real time. Thirty years of hacks and cyber-attacks have
> proved that computers are insecure machines. As they spread, so will that
> insecurity. Miscreants will be able to exploit it remotely and at a huge
> scale.

[p. TQ 4]

> Consumers can buy smart light bulbs, such as Hue from Philips, a Dutch
> electronics giant, which can be switched on or off by phone or voice and can
> generate thousands of tones and shades. Viewers of “12 Monkeys”, an American
> science-fiction tv series released in 2015, can download an app that will
> sync with their light bulbs, automatically changing their colour and
> brightness to match the mood of an episode moment by moment.

...

On the difficulties of hooking Smart Home systems together (Ben Wood):

> “It’s a very Heath Robinson kind of patchwork, a jigsaw puzzle of
> connectivity.” 

...

> products from one manufacturer often fail to work well with those from
> another. Standards do exist: Zigbee and z-wave are wireless networking
> protocols designed for the type of low-power radios found in smart-home
> gadgetry. But many firms either use proprietary standards or implement
> existing standards in ways that prevent their products working with those
> from other companies.

> Many companies are involved. Tim Hatt at gsma Intelligence says that
> telecoms firms are keen to find new, higher-margin businesses rather than
> simply acting as “bit pipes”, so they have built smart-home offerings as
> well. Vodafone, a telecoms company, advertises the v-Home hub as a central
> control point for smart-home devices. sk Telecom, a South Korean firm, has
> the Nugu. at&t, an American company, offers its Smart Home Manager. Others
> are startups, such as Wink, which launched with backing from General
> Electric. In Britain, even British Gas, a former state-owned energy
> monopoly, has got in on the act. It launched Hive, a smart-home ecosystem in
> 2013.

> That fragmentation means risks

...

> Until fairly recently, says Mr Wood, the assumption was that smart homes
> would be controlled from phones. But, he says, the reality is different.
> “Pulling out your phone, unlocking it, tapping an app, then using it to turn
> the lights on, is much more complicated and annoying than simply walking
> across the room and pushing a button”. Voice, he says, is by far the most
> convenient user-interface.

> Amazon’s Alexa and Google Home, the two firms’ smart-speaker products,
> already have greater market penetration than rival smart-home hubs. 

[pp. TQ 5-6]
