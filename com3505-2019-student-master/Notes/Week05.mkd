COM3505 week 05 notes
===

# **NOTE: as detailed in email on Weds 30th Oct Assessment 1 is extended for one week. The assessment slots to demo your work will be on Tuesday 12th November. (You should check in and push your work before Monday 11th Nov midday.)**

We've now covered quite a lot of ground, from blinking LEDs and reading from
switches to getting our devices to talk to WiFi and push data into the cloud.
Below we detail the first assessment, which you now have one week to work on.
(This assessment counts for 30% of your course marks.)

[**Out of date; see above!**] Next Monday (Nov 4th) you must **check in and push your solutions** (before
midday), and next Tuesday (Nov 5th) between 2pm and 3.50pm you must
**demonstrate your solutions** to your GTA in DIA 2.02. (There is no lecture
on Mon 4th Nov.)

Each team will have a 10 minute slot to demonstrate their work (which you need
to **book in advance** in the lab tomorrow). You should turn up a few minutes
before your slot and set up on your normal workbench. After the assessment
please leave the lab promptly. Please keep unnescessary noise to a minimum.

Following the assessment period you'll have the rest of week 6 to review
lectures, the model code, notes and previous reading lists, and to prepare for
a **mock** MOLE quiz. The mock will show you what to expect from the exam (in
week 12). It will run on **Thursday 14th November at 9am in DIA computer room
1**.

(**Note**: if you have an LSP that you want actioning in relation to this
assessment please confirm with Hamish.)

Good luck!


# The Lecture

This week's lecture [slides are
here](https://docs.google.com/presentation/d/1tsh6y62yQw_XteV_RJSJadIr9ScjUvWVbbThCL4uwtQ/edit?usp=sharing).
(Guest lecturer: Gareth Coleman.)


# Learning Objectives

Our objectives this week are to:

- learn more about IoT sensors and actuators in the lecture,
- deepen our knowledge of IoT device provisioning, and
- get hands-on experience of providing firmware updates over network
  connections.


# Assignments and Assessment

You need to do four things this week:

1. see your GTA in the lab tomorrow and **book a slot** for next week's
   formal assessment
1. **document** and then **enhance** firmware for WiFi-based provisioning 
   and over-the-air update (OTA) on the ESP ([see
   below](#proupdthing-provisioning-and-firmware-update))
1. check in and push your code and documentation before
   **midday next Monday** [Out of date, see above] (Nov 4th)
1. demonstrate your solution to your GTA **next Tuesday** [Out of date, see above] (5th Nov)


## Pro+UpdThing: Provisioning and Firmware Update

Your repository now contains [MyPro+UpdThingIDF/](../MyPro+UpdThingIDF), firmware
providing both WiFi-based provisioning and Over-the-Air (OTA) updates for the
ESP32.

Your **task list** is as follows:

- make sure that your [`pair.txt`](Week01/Pairs.mkd) file has [the assessed
  repo holder first](#order-your-pair-files)
- configure and test: see [configuring Pro+UpdThing](#configuring-proupdthing)
- [document](#documenting-the-existing-system) the existing operation, design
  and implementation of the code (in [the doc/
  directory](../MyPro+UpdThingIDF/doc))
- make some or all of these enhancements to the code, and document them:
  - use the [ESP's touchpad capabilities](Week05/Touch.mkd) to make the OTA
    process more secure
  - change the code to keep a cached list of available Access Points,
    refreshed every few seconds, instead of scanning for APs whenever the
    `apListForm` method is called; what options are there for scheduling this
    action?
  - rewrite the OTA process using the ESP IDF API
- design and document possible future enhancements:
  - what levels of power usage would we expect during different stages of
    provisioning and updating? what mechanisms might we use to reduce power
    consumption?
  - what residual security vulnerabilities does an ESP32 running this firmware
    have? what mechanisms might we use to ameliorate them? in what ways does
    the new ESP32-S2 chip improve the security profile of the architecture?
  - if your ESP was connected to a motion sensor (or accelerometer) what might
    you change in your system?

Keep checking in and pushing to your repository as you iterate through design,
development, testing and documentation phases.


### Order your pair files

Your lab work will be assessed via one git repository per pair. The owner of
this repo **must be listed first** in [your `pair.txt`
files](Week01/Pairs.mkd). Make sure to change the order if necessary, then
check in and push.


### Configuring Pro+UpdThing

The `MyPro+UpdThingIDF` build assumes that a file called `private.h` exists in
your home directory (`$HOME`). (If you are on `lincomp` this should have been
created for you by the `unphone-sheffield.sh` script.)

To allow the firmware to download from your (private) GitLab repo, you must
create a _Personal Access Token_ (PAT) on `gitlab.com` and add it to
`private.h`:

- from your account menu (top right on `gitlab.com`) select `Settings`, then
  `Access Tokens`, and `Add a personal access token`
- choose a meaningfull name, and expiry date (e.g. the end of the year);
  select `read_repository` under `Scopes`, and hit `Create personal access
  token`
- your next screen will show you the token (which you must copy immediately:
  you won't be able to get access to it again!)
- in your `private.h` file, add `#define _GITLAB_TOKEN "..."`

Screenshots (with my token hidden! click for larger images):

[ ![](Week05/gitlab-pat-01-200.png "GitLab PAT 1") ](Week05/gitlab-pat-01.png)
[ ![](Week05/gitlab-pat-02-200.png "GitLab PAT 2") ](Week05/gitlab-pat-02.png)

You also need to define your project ID (which is a unique identifier for your
gitlab repository; it appears next to the project title on the top-level
page). Copy it and define it in your `private.h` file:

```cpp
#define _GITLAB_PROJ_ID "1234567"
```

Check that you have everything in place by building, flashing and performing
updates as below.


## Documenting the Existing System

Provide documentation of the existing operation, design and implementation of
the [MyPro+UpdThingIDF firmware](../MyPro+UpdThingIDF) we have supplied. You
may wish to cover:

- what is the purpose of provisioning? and (over-the-air) updating?
- how has `MyPro+UpdThingIDF` chosen to implement these functions?
- how secure is the implementation?
- how efficient is the implementation?
- are there [m]any bugs?!
- how might it be improved?
- what is the dominant programming style? what are its advantages and
  disadvantages?

You may want to write some pseudocode for the main algorithm, or use other
design tools that you're familiar with. If you include images reference them
with a relative path from your markdown file.

Put your documentation in `MyPro+UpdThingIDF/doc/README.mkd`. (Add any
supporting images etc. in the same `doc/` directory. When you've created the
code copy and docs correctly it should be [accessible
here](../MyPro+UpdThingIDF/doc/).) You may include a video or screencam of
your work if you wish, but of **not more than 1 minute** duration.

The firmware does two jobs, the first being to allow wifi provisioning, the
second to support OTA updates.

### Provisioning

When the firmware starts up, it calls a library function (`joinmeManageWiFi`)
to check if WiFi has previously been configured and if so try and join the
network. If that fails, it starts up its own WiFi access point on the ESP32
and runs a webserver on port 80 (with DNS capture, which works _most_ of the
time; if not, try 192.168.4.1). If you join the access point from a phone or
laptop, the webserver provides a list of other available access points, and
allows you to enter the network key. It then shuts down its own access point
and joins the network you specified.

For a diagrammatic view, see slide 19 in Lecture 5 (last week).


### OTA

When WiFi has been successfully configured and the ESP has an internet
connection, another library function (`joinmeOTAUpdate`) checks to see if new
firmware is available on `gitlab`. This is arranged via files pushed to a
subdirectory called [firmware/](../MyPro+UpdThingIDF/firmware/) as follows.

When a `.bin` has been exported from the IDE or built via IDF it is pushed to
`gitlab` in a file called `firmware/<<version>>.bin` (e.g. `firmware/6.bin`
for version 6). The highest version number available is stored in a file
called `firmware/version`. In the code (see
[main.cpp](../MyPro+UpdThingIDF/main/main.cpp)) an `int` variable called
`firmwareVersion` is set to the new version. We can then trigger an OTA update
by pushing new versions of the `.bin` and `version` files, and restarting the
ESP.

The IDF project `Makefile` includes a target `push-firmware` that
automatically does `make app`, takes the new version and pushes it to `gitlab`
with an updated `version` file.

Experiment with the operation of the firmware, until you understand this
process.

For example:

```bash
cd MyPro+UpdThingIDF
make app
...
make flash monitor
```

Now we're watching what is happening on the device on serial. In a different
terminal edit `main/main.cpp`, make a trivial change (e.g. `Serial.printf("now
running v%d\n", firmwareVersion");`), and increment the version number. Then:

In another terminal:
```bash
make push-firmware
```

During the lab assessment you will be asked to add something to your sketch
(e.g. something like `Serial.println("a distinctive string...");`), increment
the version number and then push the binary to GitLab and trigger OTA firmware
update on your device (which watching on the serial line).


## Hints

- We can think about the security of OTA update from (at least) two
  perspectives:
    - The communication protocol between the device and the site hosting the
      firmware. (How easy is it to listen in on that protocol? How easy would
      it be to subvert the host site?)
    - The physical security of the device itself. (Can the user choose to
      allow or disallow firmware updates, perhaps using a sensor attached to
      the ESP?)
    - In each case a good design will make explicit the choices made. (Is the
      download direct from GitLab over HTTPS? Or via unsecured HTTP?)
- Remember that to join the `uos-other` network you need to register your
  ESP's MAC address first via https://www.sheffield.ac.uk/cics/wireless/other
- If you set up your firmware to repeatedly poll a touch sensor and print the
  value returned, the Arduino IDE's `Tools>Serial Plotter` facility will draw
  a nice graph for you.
- The MyPro+UpdThingIDF tree is an IDF build, so use the [ESP IDF build
  notes](Week03/esp-idf.mkd) for how to make and burn.
- If you're including C code (as opposed to C++) in a `.c` file and you see a
  compile error something like `undefined reference ... error: ld returned 1
  exit status` try enclosing the references to C entities in your C++ files
  with `extern "C"`. (Otherwise the linker mangles the identifier names to
  avoid conflicts in C++'s object-oriented namespace, and then can't find C's
  procedural method names.)
- If you see an error like `main.cpp:46:21: error: '_DEFAULT_AP_KEY' was not
  declared in this scope` you haven't set up your `private.h` file correctly;
  on `lincomp` this is done by the `unphone-sheffield.sh` script, or [see
  here](https://gitlab.com/hamishcunningham/unphone#detailed-setup-linux) for
  an example.
- The 2019 JoinMe code contains two separate implementations of provisioning;
  the one in use is the one whose top-level entry point is:
  `joinmeManageWiFi()`, implemented in `joinme-wfmgr-2019.cpp`.
- **Don't** use the `WifiGuest` network, as this requires sign-in.
- If you wish to work in the Arduino IDE instead of the IDF build, you can
  create a directory of links like this:

```bash
cd ...your repo tree...
mkdir MyProUpdThing   # the IDE doesn't like "+" in file names :(
cd MyProUpdThing
for f in ../MyPro+UpdThingIDF/main/joinme*; do ln -s $f; done
ln -s ../MyPro+UpdThingIDF/main/main.cpp MyProUpdThing.ino
ln -s ~/private.h
```


## Marking scheme

The [marking scheme for assessment 1](Week05/LA1MarkingScheme.mkd) details the
allocation of marks for qualitative and quantitative characteristics of code,
documentation and evaluation.
