Get into a pair for lab work
===

The course is 60% assessed by practical work in the labs, which is done in
pairs. (If you have a Learning Support Plan which indicates that team-working
is unsuitable for you, then you can work on your own if you prefer.) To form a
pair you need to:

- agree with another student (or find a partner at random in the first lab
  session), and sit together in the lab
- create a file called `pair.txt` in your `com3505-2019-student` repository
- put your (`sheffield.ac.uk`) email and that of your partner in the file
- commit and push the `pair.txt` file

The team member whose repository will be used for assessed work **should be
listed first**. So, for example, I might create a file with contents like
this:

```bash
h.cunningham@sheffield.ac.uk
a.teammate@sheffield.ac.uk
```

I then `git add`, `commit` and `push` the file. You could do that via gitlab,
using their web interface, or you can do it locally in your filesystem and
then commit and push to gitlab. From the bash shell you would do that as
follows; first open a terminal, then:

```bash
$ cd com3505-2019-student
$ cat > pair.txt <<EOF
h.cunningham@sheffield.ac.uk
a.teammate@sheffield.ac.uk
EOF
$ git add pair.txt
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	new file:   pair.txt

$ git commit -vm 'added my team descriptor' pair.txt
[master 9f2a1ca] added my team descriptor
 1 file changed, 2 insertions(+)
 create mode 100644 pair.txt
$ git push
Counting objects: 3, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 362 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To git@gitlab.com:hamishstudent/com3505-2019-student
   cdc527f..9f2a1ca  master -> master
$
```

To make `git` less verbose set up [default config like
this](https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup).
(You can also stop having to type passwords all the time by using an `ssh` key
with your gitlab account.)
