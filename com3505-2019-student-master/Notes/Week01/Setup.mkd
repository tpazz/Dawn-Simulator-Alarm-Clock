Set up your environment
===

Summary:
- [how to set up compile server and
  SDKs](#ltsp-linux-in-the-labs-with-arduino-ide-and-idf-sdk-on-server-vms)
- [clone your git repository locally](#working-with-your-git-repository)
- [install on your own
  machine](#installing-the-development-tools-on-other-machines) (optional)
- [using the DIA 2.02 (EE lab) laptops](#ee-lab-robot-laptops)
- [using VSCode as an editor](#using-vscode)
- [FAQ](#faq)

In the lab classes we use Linux diskless LTSP machines to burn firmware to IoT
devices, but to speed up the process we also use VM (virtual machine) Ubuntu
18.04 servers for firmware compilation. Both the LTSP and the servers mount
the same disk storage as your HOME directory, so firmware binaries are easy to
access from both. (The disadvantage of this approach is that there isn't much
space in HOME, and the compile trees are quite large. Keep an eye on how much
disk you're using with `quota -s`.)

(**Note:** as discussed in the lecture, we're most able to support you if you
use the Linux option on the lab machines. You're welcome to use the windows
option instead, or to install the Arduino IDE, IDF SDK and libraries on your
own laptop -- but we won't necessarily be able to fix all problems you may
encounter if you do so, and the University Windows setup doesn't support ESP
IDF or the latest version of the Arduino IDE.)


### LTSP Linux in the labs with Arduino IDE and IDF SDK on server VMs

- boot the PC (e.g. in DIA 2.02) into "Diskless Linux" (LTSP); [more details
  and available
  locations](https://www.sheffield.ac.uk/cics/desktop/bootingltsp)
- log in
- click on the "Login to U drive and Resources" icon on the desktop
- open a terminal (using Cntrl+ALT+T for example)
- open another terminal (or tab, with Cntrl+SHIFT+T), and log in to the
  compilation VM:
    - `ssh -AX lincomp`
    - the **first time you log in** you then need to run
      `unphone-sheffield.sh` to set up your compiler and IDE (using a gitlab
      repository called
      [hamishcunningham/unphone](https://gitlab.com/hamishcunningham/unphone)
      )
- then do your compiles on the VM (either via `make` and IDF, or the Arduino
  IDE and `Sketch>Export compiled binary`) to .bin; for example in the IDE:
    - `cd unphone; make arduino-ide`
    - open the `MyThing` sketch from your gitlab repo (or open an example from
      the File menu, e.g. `File>Examples>01.Basic>Blink` and do `Save As`
      locally)
    - select the board (Adafruit ESP32 Feather) from the Tools menu
    - serial monitor baud rate should be 115200
    - (we'll look at using the IDF SDK in later weeks)
- back on the LTSP machine:
    - plug in your ESP32
    - the same disk space is mapped as your home directory, so you can then
      burn firmware to a device plugged into USB from there, e.g., if you've
      exported a binary to `~/thing.bin` and `cd`'d there:

```bash
~/unphone/bin/burn.sh
  thing.bin # writes firmware to ESP (buggy! in IDF use "make flash" instead
~/unphone/bin/listen.sh         # listens for serial line output
```

(The `listen.sh` script uses `screen` to capture the serial line output. To
quit, try `Cntrl+A` and then `\`, and answer `y`.)

**Notes:**
- if you see an error like `esptool: error: argument --port/-p: expected one
  argument` then you're either still on the compile server (which will show as
  `lincomp` in your command prompt) or haven't plugged in your ESP32
- there's only space for one or two IDE builds and one or two IDF builds in
  your LTSP home space: sometimes you may need delete previous builds
- `make arduino-ide` will, when run from inside the `unphone` tree, fire up
  the Arduino IDE (version 1.9), and this will work both on the compute VMs
  (lincomp01..10) and on the LTSP desktops; in the latter case, it will be
  **slow**, but perhaps useful for serial monitoring!
- ignore errors about "not a git repository.... mruby"
- if you get errors about a missing or out-of-date python module, try `cd
  unphone; make esp-pip-installs`

<!-- TODO
- select the port (probably `/dev/ttyUSB0` or `/dev/ttyUSB1` on Ubuntu)
-->


#### Troubleshooting ssh access

- If you're logged in to a university machine, then ssh will use the ID you
  have authenticated with, e.g. ac1hc. If you're on your own machine, then you
  probably don't use that ID, and therefore need to tell ssh which to use. You
  can do this by prefixing `my-id@` to the server name you're trying to
  access, e.g. `ssh -AX ac1hc@lincomp`. Also note that you need to be inside
  the Uni firewall for this to work, so from home use the VPN.
- It is possible that you're not on the `lincomp` access control list; email
  your ID to Hamish and he'll check...


### Working with your Git repository

**Do this the first time you log in to the lab machines**:

- check out your repository from gitlab into your own file space
    - `git clone ...url...`, for example `git clone
      https://gitlab.com/YourGitLabUname/com3505-2019-student.git`
    - **don't "download"** from gitlab, you need to "clone".
    - **don't change your path on gitlab** or our scripts won't find your
      repository

**Other useful commands**:

- use `git status` to tell you what the current state of your file tree is,
  and `git diff` to show detailed changes.
- to add new files to the repository: `git add file-path`
- to commit changes all locally: `git commit -vam 'a commit log message'`
- to push committed changes back to GitLab: `git push`
- to pull down new changes from GitLab: `git pull`
- to stop the annoying messages about configuration, do the commands suggested
  (e.g. to set your email address)
- to stop having to type username/password all the time, [create an ssh key
  and register it with GitLab](https://docs.gitlab.com/ee/ssh/))
- to lower your blood pressure when subjected to ridiculous git error
  conditions: go for a walk, hum a cheery tune, or try thinking about a career
  as a florist

**Note**: git (and GitLab / GitHub) have become industry standards in recent
years, so it is important for you to get to know at least the basics. However,
an independent survey of experts recently estimated that of 2,153 git command
options fully 213% were either contradictory, confusing or error-inducing (or
all three). [I may have made that bit up.] It is depressingly easy to get git
into a mess! [I didn't make that bit up.] What to do? Here's one way to escape
from **git hell**...

Let's say you have conflicts in your com3505-student-2019 repository and the
process of resolving them is proving difficult. To re-create a clean version
of the repository (in your home directory):

```bash
cd
mv com3505-student-2019 saved-repo
git clone https://gitlab.com/YourGitLabUname/com3505-2019-student.git
```

You've now got a fresh copy to work with; if you have changes in the saved
version you can copy them over to the new, then commit and push from there.

Yes, it was called 'git' for a reason...


### Installing the development tools on other machines

If you choose to do your own
installation, instructions for the Arduino IDE and ESP32 layer can be found
here -- https://github.com/espressif/arduino-esp32#installation-instructions
-- and for the IDF here:
https://docs.espressif.com/projects/esp-idf/en/latest/get-started/

To use the `unphone` setup method on Linux:

- to install on your own machine follow the instructions here:
  https://gitlab.com/hamishcunningham/unphone#installation
- (this works on Linux and MacOS; for Windows you may need a little hacking,
  or to use an environment that supports symbolic links, e.g. Cygwin or WSL or
  Git Bash)
- set up the Arduino IDE
    - from the terminal do: `cd unphone; make arduino-ide`
    - use an external editor if you like (by setting IDE preferences
      accordingly)
    - **don't** ask the IDE to update your libraries (we'll do that via your
      gitlab repo) so uncheck `File > Preferences > Check` for updates on
      startup

Note that the "setup" target in the unphone Makefile assumes you're on Linux;
you could tinker with it to do a Mac or Windows download instead, or just
follow the instructions on the arduino.cc site to install the latest beta for
Mac or Windows.


### EE Lab ("robot") Laptops

From Week 5 there are 40 laptops available that run Ubuntu 16.04, ESP IDF and
the Arduino IDE. These live in a cabinet in the room behind the EE lab
lectern.

They **don't** mount your Uni filespace, so you'll need to clone your
repository each time you use them, and delete your files and credentials
afterwards.

To use them:

- ask a GTA to give you a machine
- log in as `robot`, password the name of the building you're in (!)
- clone your repo
- work as normal


### Using VSCode

Simon F contributed this recipe for using VSCode as an editor. (Thanks Simon!)
Some more tweaks may need to be done for full IntelliSense compatibility, so
you may need to hide squigglies until we figure out the additional paths you
need to add. You can still use these instructions to do things like uploading
your code to the ESP32, though.

First install VSCode itself; on Ubuntu you can do that like this on recent
versions:

```bash
snap install code --classic
```

For older versions:

```bash
sudo apt install software-properties-common apt-transport-https wget
wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"
sudo apt-get update
sudo apt-get install code
```

You can then run the beast from the command line with `code`, or from the
launcher by `vs...`.

Now install the C++ and Arduino extensions:

- Follow the installation instructions at [this
  page](https://marketplace.visualstudio.com/items?itemName=vsciot-vscode.vscode-arduino)
  to install the Arduino extension and at [this
  page](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools)
  to install the C/C++ extension.
- Add the following keys and values to your settings.json, usually stored at
  ~/.config/Code/User/settings.json on Linux systems:

```json
  "arduino.path": "/home/YOURUSERNAME/unphone/sdks/arduino-PR-beta1.9-BUILD-115",
  "C_Cpp.default.includePath": ["/home/YOURUSERNAME/unphone/sdks/arduino-PR-beta1.9-BUILD-115/libraries/"]
```

Your paths might differ from what I've got here. These paths should point to:

- your Arduino IDE installation under your `unphone` directory, which should
  be `unphone/sdks/arduino-PR-beta1.9-BUILD-115`
- the `libraries` directory under that one.

Make sure your JSON is still valid, and save it. You might also need to close
and reopen Visual Studio Code for your include path to be recognised.

Doing all of the above will give you access to many of the Arduino IDE's
functions from within the Command Palette (usualy Ctrl+Shift+P) within VSCode
under the same names.


### FAQ

- if you can't log in to lincomp send me your uni ID, you may not be
  registered for access
- if you see an error like `esptool: error: argument --port/-p: expected one
  argument` then you're probably either still on the compile server (which
  will show as `lincomp` in your command prompt) or haven't plugged in your
  ESP32; occasionally it may also be a connection problem or USB fault
- the SDK setup process mostly assumes you're on 64 bit Linux; to work on Mac
  or Windows or 32 bit you'll need to follow the relevant platform install
  docs for the Arduino IDE and for ESP IDF (messages like "can't execute java"
  when trying to start the Arduino IDE can indicate that you've done a Linux
  install on a Mac, for example, or that you're using a 32 bit VM to run
  Linux)
- if you're running on your own machine it will likely be fast enough to do
  your compiles locally and not bother with `lincomp`; if you do want to use
  lincomp note that you'll need to manually copy the `.bin` files back to your
  local machine for burning
- if you're doing your own install on Ubuntu and getting permissions errors on
  `/dev/ttyUSB0` check that you've added yourself to the `dialout` group
- what flavour of C++ do these tools use? depending on what versions of ESP
  IDF we're using, either C++14 or C++17; see e.g.
  [here](https://www.esp32.com/viewtopic.php?f=10&t=7400&p=31257#p41667) for
  details
